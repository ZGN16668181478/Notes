Django创建：
        1.对应目录创建项目django-admin startproject project_name
        *2.设计数据表
        3.配置数据库(Django默认是SQLite)
            需要在构造目录下进行init配置数据库类别
            如果没有models.AutoField，默认会创建一个id的自增列，如果要自定义一个自增列,需要给列设置为主键，primary_key = True
        4.项目下创建应用(同一个项目下可以创建多个应用)
        5.激活应用，即在setting.py中installed_apps中进行注册
        6.定义模型，数据库中一张表对应一个模型，是一个类需要对models进行继承，一个变量对应表中的一个类型
        7.生成数据表：生成迁移文件，迁移文件   若出问题先删除迁移文件，删除数据库，重新来
        8.引入包
        9.对表进行增删改查：(一般是在shell窗口命令下)
            model_className.objects.all()
            model_className.objects.all().values('user')取user列
            model_className.objects.all().values_list()取多个生成列表
            model_className.objects.get(id=1)
            添加：
                1.model_className.objects.create(name='1',*)
                2.model_className(name='1',*).save()
            删除：
                model_className.objects.filter(id=1).delete()
            修改：
                1.model_className.objects.filter(id=1).update(pwd=2)
                2.obj = model_className.objects.get(name=1)
                    obj.pwd = 2
                    obj.save()
        10.关联对象：
                grade = grades()
                stu = grade.student_set()     type(stu)是集合类型                创建：需要在外键关联上进行创建，否则会报错
                django.db.utils.IntegrityError: (1048, "Column 'sGrade_id' cannot be null")
        11.ORM:object relations mapping(映射)  ：
        12.Admin站点管理：负责添加、修改、删除内容,需要数据库有表才能进入
        配置Admin应用(django.contrib.admin,默认添加)，在manage.py中创建用户，必要时进行汉化
        在admin.py中进行models注册(装饰器进行注册)(在admin.py 里进行注册的过的，会在admin页面进行显示相应的模块)，设置admin相关页面的分布内容
        设置页面列的属性(short_description)，设置关联对象(inline=[className],设置的是当前页里添加关联对象的内容)，列表页属性，添加和修改页属性,动作执行位置
MTV:
    1.模块：models.py
        关系：ForeignKey,一对多，将字段定义在多端中  对象.模型类小写_set
      eg:grade.student_set
              ManyToManyField,  多对多，将字段定义在两端中  
              OneToOneField,    一对一，将字段定义在任意一端中  grade.student
              访问id:对象.属性_id     eg:student.sgarde_id
        定义属性： 命名遵循标识符规范，不允许使用连续下划线
            逻辑删除和物理删除
            字段约束:null=True,blanke=True(null是数据库范畴概念，blanke是表单验证范畴),db_column(字段的名称),db_index=True(此时会在表中为此字段创建索引)
        元选项:class Meta:
              db_table:设置表名，默认是包名_模型类名   eg:myapp_students
              ordering:对象的默认排序字段，ordering = [-'gId']降序，相反则升序，排序会增加数据库开销
        自定义管理器：此时默认的objects就不存在，  eg：student.objects.all()      newObj = models.Manager()
        自定义管理器Manager类:是模型类与数据库进行交互的接口，添加额外方法，修改返回的原始数据(原始数据不太圆润)，重写get_queryset
            调用的时候需要注意，本来是objects = models.Manager(),修改后
        添加对象：向数据库中添加数据
            1.通过自定义管理器Manager中添加方法进行添加，为了方便通用，一般不具体，
            创建对象 eg:stu = self.model(),然后逐个添加属性，save操作才与数据库进行操作
            2.通过来模型类中类方法进行添加，注意返回值
        模型查询：即从数据库中获取对象集合，可以有多个过滤器·(相当于SQL中where条件)
            查询集：过滤器进行筛选，可以进行链式查询
                isnull,isnotnull:eg: Student.objects.filter(sage__isnull=True)
                惰性执行：创建查询不会带来任何数据的访问，调用时才有
                直接访问数据：迭代，序列化，与if连用
                返回查询结果集：
                    all
                    filter(k=v)|filter(k=v,k2=v2)|filter(k=v).filter(k2=v2)
                    values
                    order_by(排序)
                    exclude(过滤掉符合条件的)
                返回单个数据：
                    get:返回一个符合条件的对象，若无会引发模型类DoesNotExists,若有找到多个对象，则引发模型类MultipleObjectsReturned异常
                    count:返回查询个数
                    first,last
                    exists():判断查找中是否有数据，有则返回True，否则False
                限制查询集：eg:Student.objects.all()[0:5],这里下标不能为负！！！
                查询集的缓存：每个查询都含有一个缓存，来最小化对数据库的访问，在新建的查询集中，缓存首次为空，之后会发生数据缓存
            !!!!字段查询：属性名__比较运算符=值，外键：属性名_id(注意下划线)
                    比较运算符: 
                        exact：判断内容真假   大小写敏感
                        contains:是否包含     大小写敏感
                        startswith,endswith:开头和结尾   大小写敏感
                        in:eg:Student.objects.filter(gId__in=[1,2,3])
                        gt,gte,lt,lte:大于，大于等于，小于，小于等于
                        时间：eg: Student.objects.filter(gTime__year=2019)
                        跨关联查询：处理join查询：模型类名__属性名__比较运算符
                            eg:grades.objects.filter(student__pk__gt=2)
                        快捷查询:eg:Student.objects.filter(pk=1)  pk为主键(不一定是id)
                    聚合函数：使用aggregate函数返回聚合函数的值，
                        Avg,Count,Max,Min,Sum,
                        eg:Student.objects.aggregate(Max('age'))
                    F对象：一个对象里的A属性和B属性进行比较,他支持算数运算
                        eg:student.objects.filter('gNum'__gt=F('bNum')+10)
                    Q对象：实现or查询,支持取反(~)
                        eg:student.objects.filter(~Q('gNum'__gt=3)|Q('bNum'__lt=2))
    2.视图：views.py
        大致内容：
            django2 视图使用的是path,path匹配不了正则，re_path方法才能进行匹配
            在进行匹配时需要对匹配内容进行导入，然后直接引用
            先写模板，匹配url，匹配到了就调用视图，定义的视图里取出模板数据，然后传给模板，将渲染好的页面返回给浏览器
            localhost:8000/grades/22    先对grades进行配置urls和views,在对22进行配置 模板只要能使用，用一样的html模板都可以
        1.404,500,400：url匹配不成功直接进行调用这几个视图，eg:将404.html放在templates目录下就可以了，匹配不成功就会直接进行调用404之类
        2.HttpRequest对象：由Django创建，服务器接收到http请求后，就会根据报文创建HttpRequest对象
            属性：
                path:请求的完整路径，但不包括域名和端口
                method：请求方式，常用有get和post
                encoding:浏览器提交数据的编码方式
                GET:类似字典的对象，包含了所有get请求的数据，内容不可变
                POST：类似字典的对象，包含了所有post请求的数据
                FILES：类似字典的对象，包含了所有上传的文件
                COOKIES：字典，包含了所有的cookie
                session:类似字典的对象，表示当前会话 
            方法：is_ajax,如果是XMLHttpRequest发起的，返回True
            QueryDict对象：request对象中get,post都是，
                方法：get():根据键值只能获取一个值
                    getlist():将键值以列表形式返回，eg:locahost:8000/us?a=1&a=2 a都可以获取
                    这两方法POST和GET属性都可以调用
        3.HttpResponse:由程序员创建，给浏览器返回数据
            不用模板直接返回数据：return HttpResponse()
            调用模板：render(request,template_name,content),结合数据和模板，返回完整的HTML页面
            属性：charset,content,status_code,content_type(输出的mime类型)
            方法：
                init:使用页面内容实例化HttpResponse对象
                write(content):以文件形式写入
                flush():以文件的形式输出缓冲区，即刷新
                set_cookie(key,value,max_age,exprise)
                delete_cookie(key):若无key也不影响，权当啥也没发生
                eg:HttpResponse().write(),方法都在响应里
            子类：
                HttpResponseRedirect:重定向,服务器端跳转，也可以redirect(toUrl)
                JsonResponse:返回json数据，一般用于异步请求
        4.状态保持：http协议无状态时，每一次请求都是一次新的请求，不记得以前的请求，客户端和服务端一次通信就是一次回话，实现状态保持：在服务端或客户端存储有关回话的数据
            cookie:所有数据在客户端，不存储敏感数据
            session:所有数据存取在服务端，客户端用cookie存储session_id
                session的启用
                session的使用：每个HttpRequest对象都有个session对象，类似字典对象
                    get(key,default=None)
                    clear():清空所有
                    flush():删除当前回话和回话的cookie
                session的过期时间：eg:request.session.set_expiry(key)
                    key单位是秒
                    key=0，关闭浏览器失效
                    key=none,永不过期
                logout方法清除session,直接导入模块中logout,logout(request)
            目的：在一段时间内跟踪请求者的状态，可以实现跨页面访问当前请求者数据
            不同请求者之间不会共享这个数据
    3.模板
        定义模板：
            变量：eg:{{var_name}},若它不存在则插入为空字符串
                点语法：即name.sname,字典查询，属性或方法，数字索引
                调用对象的方法时不能传递参数
            标签：{% tag %},在输出中创建文本，控制逻辑和循环
                if:{% if 表达式%}   语句 {% endif %}，else和elif都可以这样使用  
                for:{% for 表达式 %}语句 {% endfor %}
                    若循环列表为空时,{% empty%} 语句 {% emptyfor %}
                comment: 注释，语法同上
                 ifequal,ifnotequal:{% ifequal var1 var2 %} 语句{% endifequal %}
                include:加载模板并以标签内的参数渲染 
                    {% include '模板目录' var1 var2 %}
                url:反向解析  {% url'namespace:name' p1 p2 %}
                csrf_token:跨站请求伪造保护，{% csrf_token %}
                block,extends:用于模板的继承
                autoescape：用于HTML页面的转义
            过滤器：{{varName|function}}
                添加默认值：{{varName|default:value}}
                转成日期：{{varName|date:'y-m-d'}}
                HTML转义：escape
                加减乘除：{{varName|add [-]num}}  [表示可选]
                    {{varName|divisibleby:num}}
                    {% widthratio num 1 5 %} ->> num/1*5}
                注释：{##}:单行注释  {% comment %}{% endcomment %}:多行注释
            反向解析：改变硬链接，访问时出现地址解析问题
                path(r'^',include('myApp/url',namespace='app'))
                path(r'^',view.good,name='good')
                <a href={% url 'app:url' %}></a>
            模板继承：减少页面的重复定义，实现页面的重用
                block标签:在父模板中预留区域，子模板进行填充
                eg: {% block 标签名 %}   {% endblock 标签名%}
                    <div id='main'>{% block main %}   {% endblock main%}</div>,这里是挖坑
                    填坑:{% block main %}  content {% endblock main%}
                extentd标签:继承模板，在模板文件的第一行进行显示
                    eg: {% extends 路径 %}
            HTML转义：将接收到的字符串当成HTML代码渲染
                escape: {{varName|escape}}:转成想要的字符串
                sage: {{varName|safe}}:进行html转义
                autospace标签： {% autospace off%}  解决一堆转义 {% endautospace %}  off为关闭自动转义
            CSRF:
                跨站请求伪造：利用登录用户在浏览器中认证进行，从而攻击服务
                防止：setting中配置文件，和{% csrf_token %}
            验证码：注册登录时候使用，防止暴力破解
    4.Django高级
        静态文件：  
            1.确保django.contrib.staticfiles添加到settings.py的INSTALLED_APPS
            2.确保settings中设置了STATIC_URL    (这两部Django自己弄好了)
            3.创建manager.py同级目录static目录(注意文件夹名字名字)
            4.放入方法：
            STATIC_URL：像图片就可以用   STATICFILES_DIRS:css,js文件可以用 一般
                1.STATICFILES_DIRS
                2.根据STATIC_URL,在HTML文件中先加载static标签再用static标签
                3.在setttings.py的templates/
                STATIC_URL='static' 后面就可以直接接static目录下地址了
                eg: {static 'myapp/img.png'}  这里static代表STATIC_URL,两个拼接
                options,添加'builtins':['django.templates.static']
        中间件：一个轻量级、底层的插件，可以介入django的请求和响应，是一个python类
            方法：
                __init__:不需要传参数，服务器响应第一个请求的时候自动调用，用于确定是否启用中间件
                process_request(self,request):执行视图之前(分配url匹配视图之前),每个请求都会调用，返回None或HttpResponse对象
                process_view(self,request,view_func,view_args,view_kwargs):调用视图之前执行，每个请求都会调用，返回None或HttpResponse对象
                process_template_response(self,request,response):视图和模板之间调用，每个请求都会调用，返回None或HttpResponse对象，使用render()
                process_response(self,request,response):所有响应返回浏览器之前调用(即模板之后调用),每个请求都会调用，返回HttpResponse对象
                process_exception(self,request,exception):当视图抛出异常时调用，返回HttpResponse对象
            自定义中间件
            上传图片：将本地文件上传到服务器，大文件利用chunks()方法，以及合成路径,注意MEDIA_ROOT的合成路径
        分页：创建对象，获取页数，获取页码，点击分页
            Paginator对象：
                创建对象：Paginator(useList,pageNum),返回分页对象
                属性：
                    count(有多少个对象)
                    num_pages(有多少页)
                    page_range:页码列表([1,2,3,4])(页码从1开始，即第一页开始)
                方法：page(num),获得某页的page对象，num错误则会抛出异常
                异常：InvalidPage,PageNotAnInteger,EmptyPage
            Page对象：
                创建对象：Paginator对象的page()方法返回得到Page对象，无需手动创建
                属性：
                    object_list:当前页所有数据(对象)列表
                    number:当前页的页码值
                    paginator:当前page对象关联的paginator对象
                方法：Paginator(list,num).page.has_next()
                    has_next()
                    has_previous()
                    has_other_pages()
                    next_page_number():返回下一页页码
                    previous_page_number():返回下一页页码
                    len():返回当前页的数据(对象)个数
        富文本：tinymce模块
            在站点中使用富文本:
                配置settings.py文件
                    INSTALLED_APPS添加tinymce
                    增加TINYMCE_DEFAULT_CONFIG = {富文本的设置}
                创建一个模型类：  主要是富文本区域HTMLField()
                配置站点：在admin.py进行注册就可以
        celery: 处理耗时操作以及隔段时间同步数据http触动请求
                将耗时操作放到selery执行，使用selery定时执行
                任务(task)：本质是个函数，将耗时操作封装成一个函数
                队列(queue):将要执行的任务放在队列里
                工人(worker)：负责执行队列中的任务
                代理(broker)：负责调度，一般使用redis
            配置settings.py:
                INSTALL_APPS
                import djcelery
                djcelery.setup_loader()  进行初始化
                BORKER_URL = 'redis://:redis用户名@127.0.0.1:port/0'
                CELERY_IMPORTS = ('myApp.task') task自己创建    
            在应用目录下创建task.py文件
            直接迁移生成celery需要的数据库表
            在工程目录下的project目录下创建celery.py的文件                  
            在工程目录下的project目录下的__init__.py文件中添加(就像开始没有pymysql一样进行添加)
            
