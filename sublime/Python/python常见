end=''
    作为print()BIF的一个参数，会使该函数关闭“在输出中自动包含换行”的默认行为。其原理是：为end传递一个空字符串，这样print函数不会在字符串末尾添加一个换行符，而是添加一个空字符串。这个只有Python3有用，Python2不支持。
使用f''转换没有空格，而半角符有空格。
    eg:print(f'{a}"hhh"')  print(a,'hhh')
{}：其中的内容可以通过,换行
[]：其中的序号一般表示下标
discard:  s.discard(value)  # 删除的元素不存在则不做任何操作
          s.remove(5)  # 删除的元素不存在则报错
最后一个元素：list[-1]
int类型不可迭代
'%s,%d'%(name,age)
函数在定义中，通过在参数前加星号，让函数接受任意多的位置参数,将传递进来的多个参数转化为一个对象，元组或字典，可以说是将这些参数值收集起来。
    参数前加一个星号，表明将所有的值放在同一个元组中，该参数的返回值是一个元组。
    参数前加两个星号，表明将所有的值放在同一个字典中，该参数的返回值是一个字典。
一个函数可以随意读取全局数据，但是要修改全局数据的时候有两种方法:
    1 global 声明全局变量 2 全局变量是可变类型数据的时候可以修改
/和//的区别：
    " / "  表示浮点数除法，返回浮点结果;
    " // " 表示整数除法,返回不大于结果的一个最大的整数
类提供默认行为，是实例的工厂
_foo__foo:
    __foo__:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突.
    _foo:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.(你可以访问，但是不要轻易访问。)
    __foo:这个有真正的意义:解析器用_classname__foo来代替这个名字,以区别和其他类相同的命名. 也是可以访问，不过需要.class.__foo。
关于类中self的添加：
    未绑定的类方法：没有self，通过类来引用方法返回一个未绑定方法对象。要调用它，你必须显示地提供一个实例作为第一个参数。eg:a = ClassName.name
    绑定的实例方法：有self，通过实例访问方法返回一个绑定的方法对象。Python自动地给方法绑定一个实例，所以我们调用它时不用再传一个实例参数。 eg:a = ClassName() x = a.name
未进行实例化和实例化调用方法：
    未实例化则没有将类中执行一遍，调用时没有self。实例化则已经运行一遍，不需要再传self
特殊方法__len__:直接len()进行调用
思想拆箱即用
关于finally：
    如果try中没有异常，那么except部分将跳过，执行else中的语句。
    finally是无论是否有异常，最后都要做的一些事情。”
    这里补充一句，在含有return的情况下，并不会阻碍finally的执行。
关于文件的打开和其他操作：
    p = open('cc.txt','w')
    p = os.remove('cc.txt')
    会有winerror 32 不能同时运行
开放封闭    
return [x for x in list if x]  !!!这里是判断返回值不为空，默认空串为false
map类型可以迭代
bin():转成二进制
在写入文件方法write时，默认是t类型，当为b类型时，需要对字符串进行转换
    eg: b'Hello world',否则   
    TypeError: a bytes-like object is required, not 'str'
split 接受一个可选的第二个参数, 它是要分割的次数
惰性序列，像iterator
.py  .pyc  .pyw  .pyo  .pyd
# 给实例绑定一个方法,但是对其他实例对象时没有影响的，需要给类对象进行绑定才可以
    s=Student()  s.set_age = MethodType(set_age, s) 
    Student.set_age = set_age
    但如果需要限定添加的属性时，用__slots__, eg:__slots__ =(one,two),元组
__repr__()返回程序开发者看到的字符串，__str__()是用户看到的，前者是为调试服务的
想要循环就必须，实现一个__iter__()方法，返回迭代对象，通过__next__()方法获取下个值，   直到遇到StopIterationError
要表现得像list那样按照下标取出元素，需要实现__getitem__()方法
获取元素属性一般都有的内置方法，__getattr__
链式调用，eg:  Chain().status.user.timeline.list -> '/status/user/timeline/list'
__slots__变量：来限制class实例能添加的属性，  eg:__slots__=('name','sex')
关于进程：process和Process,Pool和pool
关于调试：断言(assert),pdb(单步方式运行),pdb.set_trace()(在可能出错的地方放入)
关于函数的调用：a = fn,并没有调用函数，a具有函数fn的功能
super(localClass,self):
    super继承父类默认是要传入本类，self是本类的父类实例
关于self,cls:
    普通的方法，第一个参数需要是self，它表示一个具体的实例本身。
如果用了staticmethod，那么就可以无视这个self，而将这个方法当成一个普通的函数使用。
而对于classmethod，它的第一个参数不是self，是cls，它表示这个类本身。
函数标注通常用于 类型提示：例如以下函数预期接受两个 int 参数并预期返回一个 int 值
    def sum_two_numbers(a: int, b: int) -> int:   return a + b
获取随机数：itertools中排列和组合，排列同一个数不出现多次，组合所有数不重复
如果想要返回多个值，可以将这几个值放入到序列中进行返回
要进行不调用函数的打开文件时，最好在循环的上一级进行文件打开，在循环结束进行关闭
split切割有次数进行切割